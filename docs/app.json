[{"name": "app.py", "content": "import pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport numpy as np\nfrom faicons import icon_svg\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly\n\n# Load penguins dataset from seaborn\npenguins_data = sns.load_dataset('penguins')\npenguins_data = penguins_data.dropna()\n\n@reactive.calc\ndef filtered_penguins_data():\n    \"\"\"Filter penguins data based on all user inputs.\"\"\"\n    df = penguins_data.copy()\n    \n    # Filter by selected species\n    try:\n        selected_species = input.species_filter()\n        if selected_species and len(selected_species) > 0:\n            df = df[df['species'].isin(selected_species)]\n    except:\n        pass\n    \n    # Filter by selected islands\n    try:\n        selected_islands = input.island_filter()\n        if selected_islands and len(selected_islands) > 0:\n            df = df[df['island'].isin(selected_islands)]\n    except:\n        pass\n    \n    # Filter by selected sex\n    try:\n        selected_sex = input.sex_filter()\n        if selected_sex and len(selected_sex) > 0:\n            df = df[df['sex'].isin(selected_sex)]\n    except:\n        pass\n    \n    # Filter by bill length range\n    try:\n        bill_range = input.bill_length_range()\n        if bill_range and len(bill_range) == 2:\n            df = df[(df['bill_length_mm'] >= bill_range[0]) & \n                    (df['bill_length_mm'] <= bill_range[1])]\n    except:\n        pass\n    \n    # Filter by minimum body mass\n    try:\n        min_mass = input.min_body_mass()\n        if min_mass is not None:\n            df = df[df['body_mass_g'] >= min_mass]\n    except:\n        pass\n    \n    return df\n\n@reactive.calc\ndef summary_stats():\n    \"\"\"Calculate summary statistics for filtered data.\"\"\"\n    try:\n        df = filtered_penguins_data()\n        if len(df) == 0:\n            return {'count': 0, 'avg_bill': 0, 'avg_mass': 0, 'species_count': 0, 'island_count': 0}\n        \n        return {\n            'count': len(df),\n            'avg_bill': df['bill_length_mm'].mean(),\n            'avg_mass': df['body_mass_g'].mean(),\n            'species_count': df['species'].nunique(),\n            'island_count': df['island'].nunique()\n        }\n    except Exception as e:\n        # Return safe defaults if there's any error\n        return {'count': 0, 'avg_bill': 0, 'avg_mass': 0, 'species_count': 0, 'island_count': 0}\n\n# # Page setup\n# ui.page_opts(title=\"Teja's - Palmer Penguins Interactive Analysis Dashboard\")\n\n# Sidebar with filter controls\nwith ui.sidebar():\n    ui.h3(\"Filter Controls\")\n    ui.hr()\n    \n    ui.input_checkbox_group(\n        \"species_filter\",\n        \"Select Penguin Species:\",\n        choices=list(penguins_data['species'].unique()),\n        selected=list(penguins_data['species'].unique())\n    )\n    \n    ui.hr()\n    \n    ui.input_checkbox_group(\n        \"island_filter\",\n        \"Select Islands:\",\n        choices=list(penguins_data['island'].unique()),\n        selected=list(penguins_data['island'].unique())\n    )\n    \n    ui.hr()\n    \n    ui.input_checkbox_group(\n        \"sex_filter\",\n        \"Select Sex:\",\n        choices=list(penguins_data['sex'].unique()),\n        selected=list(penguins_data['sex'].unique())\n    )\n    \n    ui.hr()\n    \n    ui.input_slider(\n        \"bill_length_range\",\n        \"Bill Length Range (mm):\",\n        min=float(penguins_data['bill_length_mm'].min()),\n        max=float(penguins_data['bill_length_mm'].max()),\n        value=[float(penguins_data['bill_length_mm'].min()),\n               float(penguins_data['bill_length_mm'].max())],\n        step=0.5\n    )\n    \n    ui.input_slider(\n        \"min_body_mass\",\n        \"Minimum Body Mass (g):\",\n        min=int(penguins_data['body_mass_g'].min()),\n        max=int(penguins_data['body_mass_g'].max()),\n        value=int(penguins_data['body_mass_g'].min()),\n        step=50\n    )\n\n# Summary statistics cards\nwith ui.layout_columns(col_widths=[12]):\n    with ui.card():\n        ui.card_header(\"\ud83d\udc27 PENGUIN ANALYSIS INSIGHTS\", style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-align: center; font-weight: 900; font-size: 28px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); letter-spacing: 2px; padding: 25px;\")\n        \n        # Dynamic Summary Section\n        ui.div(\"\ud83d\udcca Dynamic Summary\", style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; font-weight: bold; padding: 6px; text-align: center; font-size: 16px; margin: 5px 0; border-radius: 8px;\")\n        \n        with ui.layout_columns(gap=\"5px\"):\n            @render.ui\n            def total_penguins_box():\n                stats = summary_stats()\n                count = stats['count']\n                if count > 300:\n                    theme = \"bg-gradient-blue-purple\"\n                    icon_name = \"users\"\n                elif count > 200:\n                    theme = \"bg-gradient-indigo-purple\"\n                    icon_name = \"user-group\"\n                else:\n                    theme = \"bg-gradient-purple-pink\"\n                    icon_name = \"user\"\n                return ui.value_box(\n                    title=\"Total Penguins\",\n                    value=f\"{count:,}\",\n                    showcase=icon_svg(icon_name),\n                    theme=theme,\n                    height=\"150px\"\n                )\n            \n            @render.ui\n            def species_diversity_box():\n                stats = summary_stats()\n                species_count = stats['species_count']\n                if species_count >= 3:\n                    status = \"High\"\n                    theme = \"bg-gradient-green-blue\"\n                    icon_name = \"leaf\"\n                elif species_count == 2:\n                    status = \"Medium\"\n                    theme = \"bg-gradient-yellow-orange\"\n                    icon_name = \"seedling\"\n                else:\n                    status = \"Low\"\n                    theme = \"bg-gradient-red-orange\"\n                    icon_name = \"tree\"\n                return ui.value_box(\n                    title=\"\ud83e\uddec Species Diversity\",\n                    value=f\"{species_count}\",\n                    showcase=icon_svg(icon_name),\n                    theme=theme,\n                    height=\"150px\"\n                )\n            \n            @render.ui\n            def bill_length_box():\n                stats = summary_stats()\n                avg_bill = stats['avg_bill']\n                if avg_bill > 45:\n                    status = \"Large\"\n                    theme = \"bg-gradient-orange-red\"\n                    icon_name = \"arrow-up\"\n                elif avg_bill > 40:\n                    status = \"Medium\"\n                    theme = \"bg-gradient-indigo-blue\"\n                    icon_name = \"minus\"\n                else:\n                    status = \"Small\"\n                    theme = \"bg-gradient-blue-cyan\"\n                    icon_name = \"arrow-down\"\n                return ui.value_box(\n                    title=\"Avg Bill Length\",\n                    value=f\"{avg_bill:.1f}mm\" if avg_bill > 0 else \"0mm\",\n                    showcase=icon_svg(icon_name),\n                    theme=theme,\n                    height=\"150px\"\n                )\n            \n            @render.ui\n            def body_mass_box():\n                stats = summary_stats()\n                avg_mass = stats['avg_mass']\n                if avg_mass > 4500:\n                    status = \"Heavy\"\n                    theme = \"bg-gradient-red-pink\"\n                    icon_name = \"star\"\n                elif avg_mass > 3500:\n                    status = \"Medium\"\n                    theme = \"bg-gradient-purple-blue\"\n                    icon_name = \"circle\"\n                else:\n                    status = \"Light\"\n                    theme = \"bg-gradient-cyan-blue\"\n                    icon_name = \"feather\"\n                return ui.value_box(\n                    title=\"Avg Body Mass\",\n                    value=f\"{avg_mass:.0f}g\" if avg_mass > 0 else \"0g\",\n                    showcase=icon_svg(icon_name),\n                    theme=theme,\n                    height=\"150px\"\n                )\n            \n            ui.value_box(\n                title=\"Study Location\",\n                value=\"Antarctica\",\n                showcase=icon_svg(\"map-pin\"),\n                theme=\"bg-gradient-purple-pink\",\n                height=\"150px\"\n            )\n      \n        # Dataset Overview Section\n        ui.div(\"\ud83d\udcc8 Detailed Insights\", style=\"background: linear-gradient(135deg, #48c6ef 0%, #6f86d6 100%); color: white; font-weight: bold; padding: 8px; text-align: center; font-size: 16px; margin: 8px 0; border-radius: 8px;\")\n    \n        # Key Statistics Section\n        with ui.layout_columns(col_widths=[6, 6], gap=\"10px\"):\n            @render.ui\n            def top_performers():\n                df = filtered_penguins_data()\n                if len(df) == 0:\n                    return ui.div(\"No data available\")\n                \n                species_counts = df['species'].value_counts()\n                most_common_species = species_counts.index[0]\n                island_counts = df['island'].value_counts()\n                most_common_island = island_counts.index[0]\n                \n                return ui.div(\n                    ui.div(\"\ud83c\udfc6 Top Performers\", style=\"background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); color: #333; font-weight: bold; padding: 6px; border-radius: 8px 8px 0 0; text-align: center; font-size: 14px;\"),\n                    ui.div(\n                        ui.p(f\"\ud83e\udd47 Most Common Species: {most_common_species}\", style=\"margin: 5px 0; font-size: 13px;\"),\n                        ui.p(f\"\ud83d\udccd Most Common Island: {most_common_island}\", style=\"margin: 5px 0; font-size: 13px;\"),\n                        ui.p(f\"\ud83d\udc65 Count: {species_counts[most_common_species]} penguins\", style=\"margin: 5px 0; font-size: 13px;\"),\n                        style=\"padding: 8px; background: white; border: 1px solid #ddd; border-radius: 0 0 8px 8px;\"\n                    )\n                )\n            \n            @render.ui\n            def measurement_ranges():\n                df = filtered_penguins_data()\n                if len(df) == 0:\n                    return ui.div(\"No data available\")\n                \n                return ui.div(\n                    ui.div(\"\ud83d\udccf Measurement Ranges\", style=\"background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); color: #333; font-weight: bold; padding: 6px; border-radius: 8px 8px 0 0; text-align: center; font-size: 14px;\"),\n                    ui.div(\n                        ui.p(f\"\u2696\ufe0f Body Mass: {df['body_mass_g'].min():.0f}g - {df['body_mass_g'].max():.0f}g\", style=\"margin: 5px 0; font-size: 13px;\"),\n                        ui.p(f\"\ud83d\udcd0 Bill Length: {df['bill_length_mm'].min():.1f}mm - {df['bill_length_mm'].max():.1f}mm\", style=\"margin: 5px 0; font-size: 13px;\"),\n                        ui.p(f\"\ud83c\udfca Flipper Length: {df['flipper_length_mm'].min():.1f}mm - {df['flipper_length_mm'].max():.1f}mm\", style=\"margin: 5px 0; font-size: 13px;\"),\n                        style=\"padding: 8px; background: white; border: 1px solid #ddd; border-radius: 0 0 8px 8px;\"\n                    )\n                )\n\n        # Record Holders Section  \n        with ui.layout_columns(col_widths=[4, 4, 4], gap=\"8px\"):\n            @render.ui\n            def heaviest_penguin():\n                df = filtered_penguins_data()\n                if len(df) == 0:\n                    return ui.div(\"No data available\")\n                \n                heaviest = df.loc[df['body_mass_g'].idxmax()]\n                \n                return ui.value_box(\n                    title=\"\ud83c\udfcb\ufe0f Heaviest Penguin\",\n                    value=f\"{heaviest['body_mass_g']:.0f}g\",\n                    showcase=icon_svg(\"star\"),\n                    theme=\"bg-gradient-red-pink\",\n                    height=\"150px\"\n                )\n            \n            @render.ui\n            def longest_bill():\n                df = filtered_penguins_data()\n                if len(df) == 0:\n                    return ui.div(\"No data available\")\n                \n                longest_bill = df.loc[df['bill_length_mm'].idxmax()]\n                \n                return ui.value_box(\n                    title=\"\ud83d\udccf Longest Bill\",\n                    value=f\"{longest_bill['bill_length_mm']:.1f}mm\",\n                    showcase=icon_svg(\"arrow-up\"),\n                    theme=\"bg-gradient-indigo-purple\",\n                    height=\"150px\"\n                )\n            \n            @render.ui\n            def longest_flipper():\n                df = filtered_penguins_data()\n                if len(df) == 0:\n                    return ui.div(\"No data available\")\n                \n                longest_flipper = df.loc[df['flipper_length_mm'].idxmax()]\n                \n                return ui.value_box(\n                    title=\"\ud83c\udfca Longest Flipper\", \n                    value=f\"{longest_flipper['flipper_length_mm']:.1f}mm\",\n                    showcase=icon_svg(\"arrow-up\"),\n                    theme=\"bg-gradient-cyan-blue\",\n                    height=\"150px\"\n                )\n        \n        # Sex Distribution Section\n        @render.ui\n        def sex_distribution():\n            df = filtered_penguins_data()\n            if len(df) == 0:\n                return ui.div(\"No data available\")\n            \n            sex_counts = df['sex'].value_counts()\n            \n            return ui.div(\n                ui.div(\"\ud83d\udc65 Sex Distribution\", style=\"background: linear-gradient(135deg, #d299c2 0%, #fef9d7 100%); color: #333; font-weight: bold; padding: 6px; border-radius: 8px 8px 0 0; text-align: center; font-size: 14px;\"),\n                ui.div(\n                    *[ui.p(f\"{sex}: {count} penguins ({count/len(df)*100:.1f}%)\", \n                           style=\"margin: 4px 0; font-size: 13px; text-align: center;\") \n                      for sex, count in sex_counts.items()],\n                    style=\"padding: 8px; background: white; border: 1px solid #ddd; border-radius: 0 0 8px 8px;\"\n                )\n            )\n\nui.hr(style=\"margin-top: 10px; margin-bottom: 10px;\")\n\n# Main charts\nui.div(\"\ud83d\udcc8 Penguin Charts\", style=\"background: linear-gradient(135deg, #48c6ef 0%, #6f86d6 100%); color: white; font-weight: bold; padding: 8px; text-align: center; font-size: 16px; margin: 8px 0; border-radius: 8px;\")                   \nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Bill Length vs Body Mass by Species\")\n        \n        @render_plotly\n        def bill_mass_scatter():\n            df = filtered_penguins_data()\n            \n            if len(df) == 0:\n                fig = px.scatter(title=\"No penguins match current filters\")\n                fig.update_layout(height=500)\n                return fig\n            \n            fig = px.scatter(\n                df,\n                x='body_mass_g',\n                y='bill_length_mm',\n                color='species',\n                size='flipper_length_mm',\n                hover_data=['island', 'sex', 'bill_depth_mm'],\n                title='Penguin Measurements by Species',\n                labels={\n                    'body_mass_g': 'Body Mass (g)',\n                    'bill_length_mm': 'Bill Length (mm)',\n                    'flipper_length_mm': 'Flipper Length (mm)'\n                }\n            )\n            \n            fig.update_layout(\n                height=500, \n                showlegend=True,\n                legend=dict(\n                    x=0.02,  \n                    y=0.98,  \n                    xanchor='left',\n                    yanchor='top',\n                    bgcolor='rgba(255, 255, 255, 0.8)',  \n                    bordercolor='rgba(0, 0, 0, 0.2)',    \n                    borderwidth=1\n                )\n            )\n            return fig\n    \n    with ui.card():\n        ui.card_header(\"Species Distribution by Island\")\n        \n        @render_plotly\n        def species_island_bar():\n            df = filtered_penguins_data()\n            \n            if len(df) == 0:\n                fig = px.bar(title=\"No penguins match current filters\")\n                fig.update_layout(height=500)\n                return fig\n            \n            species_island = pd.crosstab(df['island'], df['species']).reset_index()\n            species_island_melted = species_island.melt(\n                id_vars='island', \n                var_name='species', \n                value_name='count'\n            )\n            \n            fig = px.bar(\n                species_island_melted,\n                x='island',\n                y='count',\n                color='species',\n                title='Penguin Species Count by Island',\n                labels={'count': 'Number of Penguins', 'island': 'Island', 'species': 'Species'}\n            )\n            \n            fig.update_layout(\n                height=500, \n                showlegend=True,\n                legend=dict(\n                    x=0.90,  \n                    y=0.98,  \n                    xanchor='right',\n                    yanchor='top',\n                    bgcolor='rgba(255, 255, 255, 0.8)',  \n                    bordercolor='rgba(0, 0, 0, 0.2)',    \n                    borderwidth=1\n                )\n            )\n            return fig\n\nui.hr(style=\"margin-top: 10px; margin-bottom: 10px;\")\n\n# Secondary charts\nwith ui.layout_columns():\n    \n    with ui.card():\n        ui.card_header(\"Bill Length vs Bill Depth\")\n        \n        @render_plotly\n        def bill_dimensions():\n            df = filtered_penguins_data()\n            \n            if len(df) == 0:\n                fig = px.scatter(title=\"No penguins match current filters\")\n                fig.update_layout(height=500)\n                return fig\n            \n            fig = px.scatter(\n                df,\n                x='bill_length_mm',\n                y='bill_depth_mm',\n                color='species',\n                hover_data=['island', 'sex'],\n                title='Bill Dimensions by Species',\n                labels={'bill_length_mm': 'Bill Length (mm)', 'bill_depth_mm': 'Bill Depth (mm)'}\n            )\n            \n            fig.update_layout(\n                height=500, \n                showlegend=True,\n                legend=dict(\n                    x=0.02, \n                    y=0.98, \n                    xanchor='left',\n                    yanchor='top',\n                    bgcolor='rgba(255, 255, 255, 0.8)',  \n                    bordercolor='rgba(0, 0, 0, 0.2)',    \n                    borderwidth=1\n                )\n            )\n            return fig\n    \n    with ui.card():\n        ui.card_header(\"Body Mass Distribution\")\n        \n        @render_plotly\n        def mass_histogram():\n            df = filtered_penguins_data()\n            \n            if len(df) == 0:\n                fig = px.histogram(title=\"No penguins match current filters\")\n                fig.update_layout(height=500)\n                return fig\n            \n            fig = px.histogram(\n                df,\n                x='body_mass_g',\n                color='species',\n                title='Body Mass Distribution by Species',\n                labels={'body_mass_g': 'Body Mass (g)', 'count': 'Number of Penguins'},\n                nbins=20\n            )\n            \n            fig.update_layout(\n                height=500, \n                showlegend=True,\n                legend=dict(\n                    x=0.90, \n                    y=0.98,  \n                    xanchor='right',\n                    yanchor='top',\n                    bgcolor='rgba(255, 255, 255, 0.8)',  \n                    bordercolor='rgba(0, 0, 0, 0.2)',    \n                    borderwidth=1\n                )\n            )\n            return fig\n        \nui.hr(style=\"margin-top: 10px; margin-bottom: 10px;\")\n\n# Data table\nui.div(\"\ud83d\udc27 Filtered Penguins Dataset\", style=\"background: linear-gradient(135deg, #48c6ef 0%, #6f86d6 100%); color: white; font-weight: bold; padding: 8px; text-align: center; font-size: 16px; margin: 8px 0; border-radius: 8px;\")                   \nwith ui.layout_columns():\n    with ui.card():\n        # ui.card_header(\"\ud83d\udc27 Filtered Penguins Dataset\", )\n        \n        @render.data_frame\n        def penguins_data_table():\n            df = filtered_penguins_data()\n            df_display = df.copy()\n            numeric_cols = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm']\n            for col in numeric_cols:\n                if col in df_display.columns:\n                    df_display[col] = df_display[col].round(1)\n            return render.DataGrid(df_display, width=\"100%\")\n\nui.hr(style=\"margin-top: 10px; margin-bottom: 10px;\")\n\n# Example 4x4 grid in your Shiny dashboard:\nfrom ml import *\n\nwith ui.card():\n    ui.card_header(\"\ud83d\udc27 Complete Penguin ML Analysis Dashboard\", style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-align: center; font-weight: 900; font-size: 28px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); letter-spacing: 2px; padding: 25px;\")\n\n# Row 1: Core ML Comparison\nwith ui.layout_columns(col_widths=[6, 6]):\n    with ui.card():\n        ui.card_header(\"\ud83d\udc27 True Species Distribution\")\n        @render_plotly\n        def true_species_plot():\n            return plot_true_species_distribution()\n    \n    with ui.card():\n        ui.card_header(\"\ud83c\udfaf K-Means Clustering Results\")\n        @render_plotly\n        def kmeans_plot():\n            return plot_kmeans_clustering()\n\n# Row 2: SVM Analysis\nwith ui.layout_columns(col_widths=[6, 6]):\n    with ui.card():\n        ui.card_header(\"\ud83e\udd16 SVM Classification Predictions\")\n        @render_plotly\n        def svm_plot():\n            return plot_svm_classification()\n    \n    with ui.card():\n        ui.card_header(\"\ud83c\udfaf SVM Confusion Matrix\")\n        @render_plotly\n        def confusion_plot():\n            return plot_confusion_matrix()\n\n# Row 3: Performance & Feature Analysis\nwith ui.layout_columns(col_widths=[6, 6]):\n    with ui.card():\n        ui.card_header(\"\ud83d\udcca Model Performance Comparison\")\n        @render_plotly\n        def performance_plot():\n            return plot_performance_metrics()\n    \n    with ui.card():\n        ui.card_header(\"\ud83d\udd17 Feature Correlation Matrix\")\n        @render_plotly\n        def correlation_plot():\n            return plot_feature_importance()\n\n# Row 4: Cluster & Geographic Analysis\nwith ui.layout_columns(col_widths=[6, 6]):\n    with ui.card():\n        ui.card_header(\"\u2b50 K-Means Cluster Centers\")\n        @render_plotly\n        def cluster_centers_plot():\n            return plot_cluster_centers()\n    \n    with ui.card():\n        ui.card_header(\"\ud83c\udfdd\ufe0f Species Distribution by Island\")\n        @render_plotly\n        def island_plot():\n            return plot_species_by_island()\n\n# Row 5: Advanced Statistical Analysis\nwith ui.layout_columns(col_widths=[6, 6]):\n    with ui.card():\n        ui.card_header(\"\ud83d\udcc8 PCA Explained Variance\")\n        @render_plotly\n        def pca_variance_plot():\n            return plot_pca_explained_variance()\n    \n    with ui.card():\n        ui.card_header(\"\ud83c\udfb2 SVM Confidence Distribution\")\n        @render_plotly\n        def confidence_plot():\n            return plot_confidence_distribution()\n\n# Row 6: Summary & Feature Distributions\nwith ui.layout_columns(col_widths=[6, 6]):\n    with ui.card():\n        ui.card_header(\"\ud83d\udccf Feature Distributions by Species\")\n        @render_plotly\n        def feature_dist_plot():\n            return plot_feature_distributions()\n    \n    with ui.card():\n        ui.card_header(\"\ud83d\udccb Model Summary Statistics\")\n        @render.data_frame           \n        def summary_table():         \n            return render.DataGrid(create_model_summary_dataframe(), width=\"100%\")", "type": "text"}, {"name": "ml.py", "content": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Machine Learning imports\nfrom sklearn.cluster import KMeans\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, silhouette_score, confusion_matrix\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Global variables to store processed data\n_processed_data = None\n_ml_results = None\n\ndef preprocess_penguin_data():\n    \"\"\"\n    Preprocess penguin data and train models\n    Returns processed dataframe with all results\n    \"\"\"\n    global _processed_data, _ml_results\n    \n    if _processed_data is not None:\n        return _processed_data, _ml_results\n    \n    # Load and clean data\n    penguins_data = sns.load_dataset('penguins')\n    df_clean = penguins_data.dropna().reset_index(drop=True)\n    \n    # Features and target\n    feature_columns = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']\n    X = df_clean[feature_columns].copy()\n    \n    # Encode species\n    le_species = LabelEncoder()\n    y = le_species.fit_transform(df_clean['species'])\n    species_names = le_species.classes_\n    \n    # Scale features\n    scaler = StandardScaler()\n    X_scaled = scaler.fit_transform(X)\n    \n    # PCA for visualization\n    pca = PCA(n_components=2, random_state=42)\n    X_pca = pca.fit_transform(X_scaled)\n    \n    # K-Means clustering\n    kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)\n    cluster_labels = kmeans.fit_predict(X_scaled)\n    \n    # SVM classification\n    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42, stratify=y)\n    svm_model = SVC(kernel='rbf', random_state=42, probability=True)\n    svm_model.fit(X_train, y_train)\n    svm_predictions = svm_model.predict(X_scaled)\n    svm_probabilities = svm_model.predict_proba(X_scaled)\n    \n    # Create results dataframe\n    results_df = pd.DataFrame({\n        'bill_length_mm': df_clean['bill_length_mm'],\n        'bill_depth_mm': df_clean['bill_depth_mm'],\n        'flipper_length_mm': df_clean['flipper_length_mm'],\n        'body_mass_g': df_clean['body_mass_g'],\n        'species': df_clean['species'],\n        'island': df_clean['island'],\n        'sex': df_clean['sex'],\n        'pca_1': X_pca[:, 0],\n        'pca_2': X_pca[:, 1],\n        'true_species_encoded': y,\n        'kmeans_cluster': cluster_labels,\n        'svm_prediction': svm_predictions,\n        'svm_confidence': np.max(svm_probabilities, axis=1)\n    })\n    \n    # Map clusters to species\n    cluster_species_mapping = {}\n    for cluster in range(3):\n        cluster_mask = results_df['kmeans_cluster'] == cluster\n        most_common_species = results_df.loc[cluster_mask, 'species'].mode()[0]\n        cluster_species_mapping[cluster] = most_common_species\n    \n    results_df['kmeans_species'] = results_df['kmeans_cluster'].map(cluster_species_mapping)\n    results_df['svm_species'] = le_species.inverse_transform(results_df['svm_prediction'])\n    \n    # Store ML results\n    ml_results = {\n        'kmeans_model': kmeans,\n        'svm_model': svm_model,\n        'scaler': scaler,\n        'pca': pca,\n        'le_species': le_species,\n        'species_names': species_names,\n        'cluster_mapping': cluster_species_mapping,\n        'X_train': X_train, 'X_test': X_test, 'y_train': y_train, 'y_test': y_test,\n        'silhouette_score': silhouette_score(X_scaled, cluster_labels),\n        'svm_train_acc': svm_model.score(X_train, y_train),\n        'svm_test_acc': svm_model.score(X_test, y_test)\n    }\n    \n    _processed_data = results_df\n    _ml_results = ml_results\n    \n    return results_df, ml_results\n\n# Define consistent colors\nSPECIES_COLORS = {'Adelie': '#FF6B6B', 'Chinstrap': '#4ECDC4', 'Gentoo': '#45B7D1'}\n\n# ========================================\n# INDIVIDUAL PLOT FUNCTIONS\n# ========================================\n\ndef plot_true_species_distribution():\n    \"\"\"Plot 1: True species distribution using PCA\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    fig = px.scatter(\n        df, x='pca_1', y='pca_2', color='species',\n        title='<b>\ud83d\udc27 True Species Distribution</b><br><span style=\"font-size:12px\">Ground Truth via PCA</span>',\n        color_discrete_map=SPECIES_COLORS,\n        hover_data=['bill_length_mm', 'body_mass_g', 'island']\n    )\n    \n    fig.update_traces(marker=dict(size=10, opacity=0.8, line=dict(width=1, color='white')))\n    fig.update_layout(\n        height=350,\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1),\n        plot_bgcolor='rgba(248,249,250,0.8)'\n    )\n    \n    return fig\n\ndef plot_kmeans_clustering():\n    \"\"\"Plot 2: K-Means clustering results\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    # Create color mapping for clusters\n    cluster_colors = [SPECIES_COLORS[ml_results['cluster_mapping'][i]] for i in range(3)]\n    df['cluster_color'] = df['kmeans_cluster'].map({i: cluster_colors[i] for i in range(3)})\n    \n    fig = go.Figure()\n    \n    symbols = ['diamond', 'star', 'hexagon']\n    for cluster in range(3):\n        mask = df['kmeans_cluster'] == cluster\n        species_name = ml_results['cluster_mapping'][cluster]\n        fig.add_trace(go.Scatter(\n            x=df.loc[mask, 'pca_1'],\n            y=df.loc[mask, 'pca_2'],\n            mode='markers',\n            name=f'Cluster {cluster} ({species_name})',\n            marker=dict(\n                color=SPECIES_COLORS[species_name],\n                size=12, opacity=0.8, symbol=symbols[cluster],\n                line=dict(width=2, color='white')\n            )\n        ))\n    \n    fig.update_layout(\n        title='<b>\ud83c\udfaf K-Means Clustering (n=3)</b><br><span style=\"font-size:12px\">Unsupervised Learning</span>',\n        xaxis_title='PCA Component 1', yaxis_title='PCA Component 2',\n        height=350,\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1),\n        plot_bgcolor='rgba(248,249,250,0.8)'\n    )\n    \n    return fig\n\ndef plot_svm_classification():\n    \"\"\"Plot 3: SVM classification with confidence\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    fig = go.Figure()\n    \n    for species in ml_results['species_names']:\n        mask = df['svm_species'] == species\n        confidence_sizes = df.loc[mask, 'svm_confidence'] * 20 + 5\n        fig.add_trace(go.Scatter(\n            x=df.loc[mask, 'pca_1'],\n            y=df.loc[mask, 'pca_2'],\n            mode='markers',\n            name=f'{species}',\n            marker=dict(\n                color=SPECIES_COLORS[species],\n                size=confidence_sizes, opacity=0.7, symbol='square',\n                line=dict(width=1, color='white')\n            ),\n            customdata=df.loc[mask, 'svm_confidence'],\n            hovertemplate=f'<b>{species}</b><br>Confidence: %{{customdata:.3f}}<br><extra></extra>'\n        ))\n    \n    fig.update_layout(\n        title='<b>\ud83e\udd16 SVM Classification</b><br><span style=\"font-size:12px\">Marker size = confidence</span>',\n        xaxis_title='PCA Component 1', yaxis_title='PCA Component 2',\n        height=350,\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1),\n        plot_bgcolor='rgba(248,249,250,0.8)'\n    )\n    \n    return fig\n\ndef plot_performance_metrics():\n    \"\"\"Plot 4: Model performance comparison\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    # Calculate accuracies\n    kmeans_accuracy = (df['species'] == df['kmeans_species']).mean()\n    svm_accuracy = (df['species'] == df['svm_species']).mean()\n    \n    metrics = {\n        'K-Means<br>Silhouette': ml_results['silhouette_score'],\n        'K-Means<br>Accuracy': kmeans_accuracy,\n        'SVM<br>Train Acc': ml_results['svm_train_acc'],\n        'SVM<br>Test Acc': ml_results['svm_test_acc']\n    }\n    \n    colors = ['#FF9999', '#FFB366', '#66B2FF', '#99FF99']\n    \n    fig = go.Figure(data=[\n        go.Bar(\n            x=list(metrics.keys()), y=list(metrics.values()),\n            marker=dict(color=colors, line=dict(color='white', width=2)),\n            text=[f'<b>{v:.3f}</b>' for v in metrics.values()],\n            textposition='outside'\n        )\n    ])\n    \n    fig.update_layout(\n        title='<b>\ud83d\udcca Performance Metrics</b><br><span style=\"font-size:12px\">Model Comparison</span>',\n        yaxis_title='Score', yaxis=dict(range=[0, 1.1]),\n        height=350,\n        plot_bgcolor='rgba(248,249,250,0.8)'\n    )\n    \n    return fig\n\ndef plot_confusion_matrix():\n    \"\"\"Plot 5: SVM Confusion Matrix\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    # Create confusion matrix\n    cm = confusion_matrix(df['species'], df['svm_species'])\n    species_names = ml_results['species_names']\n    \n    fig = go.Figure(data=go.Heatmap(\n        z=cm, x=species_names, y=species_names,\n        colorscale='Blues', showscale=True,\n        text=cm, texttemplate=\"%{text}\", textfont={\"size\": 16}\n    ))\n    \n    fig.update_layout(\n        title='<b>\ud83c\udfaf SVM Confusion Matrix</b><br><span style=\"font-size:12px\">Predicted vs Actual</span>',\n        xaxis_title='Predicted Species', yaxis_title='Actual Species',\n        height=350\n    )\n    \n    return fig\n\ndef plot_feature_importance():\n    \"\"\"Plot 6: Feature correlation heatmap\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    features = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']\n    corr_matrix = df[features].corr()\n    \n    fig = go.Figure(data=go.Heatmap(\n        z=corr_matrix.values,\n        x=['Bill Length', 'Bill Depth', 'Flipper Length', 'Body Mass'],\n        y=['Bill Length', 'Bill Depth', 'Flipper Length', 'Body Mass'],\n        colorscale='RdBu', zmid=0,\n        text=np.round(corr_matrix.values, 2),\n        texttemplate=\"%{text}\", textfont={\"size\": 12}\n    ))\n    \n    fig.update_layout(\n        title='<b>\ud83d\udd17 Feature Correlations</b><br><span style=\"font-size:12px\">Pearson Correlation</span>',\n        height=350\n    )\n    \n    return fig\n\ndef plot_cluster_centers():\n    \"\"\"Plot 7: K-Means cluster centers\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    # Get cluster centers in original scale\n    cluster_centers = ml_results['scaler'].inverse_transform(ml_results['kmeans_model'].cluster_centers_)\n    features = ['Bill Length', 'Bill Depth', 'Flipper Length', 'Body Mass']\n    \n    fig = go.Figure()\n    \n    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']\n    for i in range(3):\n        species_name = ml_results['cluster_mapping'][i]\n        fig.add_trace(go.Scatterpolar(\n            r=cluster_centers[i],\n            theta=features,\n            fill='toself',\n            name=f'Cluster {i} ({species_name})',\n            line_color=colors[i],\n            fillcolor=colors[i],\n            opacity=0.6\n        ))\n    \n    fig.update_layout(\n        title='<b>\ud83c\udfaf Cluster Centers</b><br><span style=\"font-size:12px\">Feature Profiles</span>',\n        polar=dict(radialaxis=dict(visible=True, range=[0, None])),\n        height=350\n    )\n    \n    return fig\n\ndef plot_species_by_island():\n    \"\"\"Plot 8: Species distribution by island\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    # Create count data\n    island_species = df.groupby(['island', 'species']).size().reset_index(name='count')\n    \n    fig = px.bar(\n        island_species, x='island', y='count', color='species',\n        title='<b>\ud83c\udfdd\ufe0f Species by Island</b><br><span style=\"font-size:12px\">Geographic Distribution</span>',\n        color_discrete_map=SPECIES_COLORS\n    )\n    \n    fig.update_layout(\n        height=350,\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1),\n        plot_bgcolor='rgba(248,249,250,0.8)'\n    )\n    \n    return fig\n\ndef plot_pca_explained_variance():\n    \"\"\"Plot 9: PCA explained variance\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    # Calculate PCA with more components\n    pca_full = PCA(random_state=42)\n    pca_full.fit(ml_results['scaler'].transform(df[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']]))\n    \n    explained_var = pca_full.explained_variance_ratio_\n    cumulative_var = np.cumsum(explained_var)\n    \n    fig = go.Figure()\n    fig.add_trace(go.Bar(x=[f'PC{i+1}' for i in range(len(explained_var))], y=explained_var, name='Individual', marker_color='lightblue'))\n    fig.add_trace(go.Scatter(x=[f'PC{i+1}' for i in range(len(explained_var))], y=cumulative_var, mode='lines+markers', name='Cumulative', line=dict(color='red')))\n    \n    fig.update_layout(\n        title='<b>\ud83d\udcc8 PCA Explained Variance</b><br><span style=\"font-size:12px\">Component Analysis</span>',\n        xaxis_title='Principal Components', yaxis_title='Explained Variance Ratio',\n        height=350,\n        plot_bgcolor='rgba(248,249,250,0.8)'\n    )\n    \n    return fig\n\ndef plot_confidence_distribution():\n    \"\"\"Plot 10: SVM confidence distribution\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    fig = px.histogram(\n        df, x='svm_confidence', color='svm_species', nbins=20,\n        title='<b>\ud83c\udfb2 SVM Confidence Distribution</b><br><span style=\"font-size:12px\">Prediction Certainty</span>',\n        color_discrete_map=SPECIES_COLORS\n    )\n    \n    fig.update_layout(\n        height=350,\n        xaxis_title='Confidence Score', yaxis_title='Count',\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1),\n        plot_bgcolor='rgba(248,249,250,0.8)'\n    )\n    \n    return fig\n\ndef plot_feature_distributions():\n    \"\"\"Plot 11: Feature distributions by species\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    fig = px.box(\n        df.melt(id_vars=['species'], value_vars=['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']),\n        x='variable', y='value', color='species',\n        title='<b>\ud83d\udccf Feature Distributions</b><br><span style=\"font-size:12px\">Box Plots by Species</span>',\n        color_discrete_map=SPECIES_COLORS\n    )\n    \n    fig.update_layout(\n        height=350,\n        xaxis_title='Features', yaxis_title='Values',\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1),\n        plot_bgcolor='rgba(248,249,250,0.8)'\n    )\n    \n    return fig\n\ndef create_model_summary_dataframe():\n    \"\"\"Create a DataFrame with model summary statistics for @render.data_frame\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    # Calculate various metrics\n    kmeans_accuracy = (df['species'] == df['kmeans_species']).mean()\n    svm_accuracy = (df['species'] == df['svm_species']).mean()\n    \n    # Create summary DataFrame\n    summary_data = {\n        'Metric': [\n            'Dataset Size',\n            'Features Used', \n            'PCA Variance Explained',\n            'K-Means Silhouette Score',\n            'K-Means Species Accuracy',\n            'SVM Train Accuracy',\n            'SVM Test Accuracy', \n            'SVM Full Dataset Accuracy'\n        ],\n        'Value': [\n            f\"{len(df):,}\",\n            \"4\",\n            f\"{ml_results['pca'].explained_variance_ratio_.sum():.3f}\",\n            f\"{ml_results['silhouette_score']:.3f}\",\n            f\"{kmeans_accuracy:.3f}\",\n            f\"{ml_results['svm_train_acc']:.3f}\",\n            f\"{ml_results['svm_test_acc']:.3f}\",\n            f\"{svm_accuracy:.3f}\"\n        ],\n        'Description': [\n            'Total penguins after cleaning',\n            'Bill length, depth, flipper, mass',\n            'Variance captured in 2D projection',\n            'Cluster separation quality (0-1)',\n            'Accuracy vs true species labels',\n            'Training set performance',\n            'Holdout test performance',\n            'Complete dataset accuracy'\n        ]\n    }\n    \n    return pd.DataFrame(summary_data)\n\ndef plot_model_summary():\n    \"\"\"Plot 12: Model summary statistics - DEPRECATED, use create_model_summary_dataframe() instead\"\"\"\n    df, ml_results = preprocess_penguin_data()\n    \n    # Calculate various metrics\n    kmeans_accuracy = (df['species'] == df['kmeans_species']).mean()\n    svm_accuracy = (df['species'] == df['svm_species']).mean()\n    \n    # Create lists for table data\n    metric_names = [\n        'Dataset Size',\n        'Features Used', \n        'PCA Variance Explained',\n        'K-Means Silhouette Score',\n        'K-Means Accuracy',\n        'SVM Train Accuracy',\n        'SVM Test Accuracy',\n        'SVM Full Accuracy'\n    ]\n    \n    metric_values = [\n        str(len(df)),\n        '4',\n        f\"{ml_results['pca'].explained_variance_ratio_.sum():.3f}\",\n        f\"{ml_results['silhouette_score']:.3f}\",\n        f\"{kmeans_accuracy:.3f}\",\n        f\"{ml_results['svm_train_acc']:.3f}\",\n        f\"{ml_results['svm_test_acc']:.3f}\",\n        f\"{svm_accuracy:.3f}\"\n    ]\n    \n    fig = go.Figure(data=[go.Table(\n        header=dict(\n            values=['<b>Metric</b>', '<b>Value</b>'],\n            fill_color='#4ECDC4',\n            align=['left', 'center'],\n            font=dict(size=14, color='white'),\n            height=40\n        ),\n        cells=dict(\n            values=[metric_names, metric_values],  # Two separate lists\n            fill_color=['#f8f9fa', '#ffffff'],\n            align=['left', 'center'],\n            font=dict(size=12, color='black'),\n            height=30\n        )\n    )])\n    \n    fig.update_layout(\n        title='<b>\ud83d\udccb Model Summary</b><br><span style=\"font-size:12px\">Key Statistics & Performance</span>',\n        height=350,\n        margin=dict(l=10, r=10, t=80, b=10)\n    )\n    \n    return fig\n\n# ========================================\n# SHINY DASHBOARD INTEGRATION\n# ========================================\n\ndef create_ml_dashboard_grid():\n    \"\"\"\n    Example of how to use these functions in a Shiny dashboard\n    Returns a dictionary of all plot functions for easy access\n    \"\"\"\n    return {\n        'true_species': plot_true_species_distribution,\n        'kmeans_clustering': plot_kmeans_clustering,\n        'svm_classification': plot_svm_classification,\n        'performance_metrics': plot_performance_metrics,\n        'confusion_matrix': plot_confusion_matrix,\n        'feature_importance': plot_feature_importance,\n        'cluster_centers': plot_cluster_centers,\n        'species_by_island': plot_species_by_island,\n        'pca_variance': plot_pca_explained_variance,\n        'confidence_dist': plot_confidence_distribution,\n        'feature_distributions': plot_feature_distributions,\n        'model_summary': plot_model_summary\n    }", "type": "text"}]